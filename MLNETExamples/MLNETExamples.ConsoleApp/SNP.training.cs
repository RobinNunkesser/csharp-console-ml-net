// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;

namespace MLNETExamples.ConsoleApp
{
    public partial class SNP
    {
        public const string RetrainFilePath =  @"/Users/nunkesser/Projects/myMLApp/snp.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"SNP1", @"SNP1"),new InputOutputColumnPair(@"SNP2", @"SNP2"),new InputOutputColumnPair(@"SNP3", @"SNP3"),new InputOutputColumnPair(@"SNP4", @"SNP4"),new InputOutputColumnPair(@"SNP5", @"SNP5"),new InputOutputColumnPair(@"SNP6", @"SNP6"),new InputOutputColumnPair(@"SNP7", @"SNP7"),new InputOutputColumnPair(@"SNP8", @"SNP8"),new InputOutputColumnPair(@"SNP9", @"SNP9"),new InputOutputColumnPair(@"SNP10", @"SNP10"),new InputOutputColumnPair(@"SNP11", @"SNP11"),new InputOutputColumnPair(@"SNP12", @"SNP12"),new InputOutputColumnPair(@"SNP13", @"SNP13"),new InputOutputColumnPair(@"SNP14", @"SNP14"),new InputOutputColumnPair(@"SNP15", @"SNP15")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"SNP1",@"SNP2",@"SNP3",@"SNP4",@"SNP5",@"SNP6",@"SNP7",@"SNP8",@"SNP9",@"SNP10",@"SNP11",@"SNP12",@"SNP13",@"SNP14",@"SNP15"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"cl",inputColumnName:@"cl",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=17,NumberOfTrees=4,MaximumBinCountPerFeature=324,FeatureFraction=0.8573617775436432,LearningRate=0.577909917756542,LabelColumnName=@"cl",FeatureColumnName=@"Features",DiskTranspose=false}),labelColumnName: @"cl"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
